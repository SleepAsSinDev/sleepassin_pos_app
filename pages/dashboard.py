# pages/4_üìä_Dashboard.py (Patched for backward compatibility)

import streamlit as st
import requests
import pandas as pd
import plotly.express as px
from datetime import datetime, timedelta

API_BASE_URL = "http://localhost:8000"

@st.cache_data(ttl=300)
def get_all_orders():
    try:
        response = requests.get(f"{API_BASE_URL}/orders"); response.raise_for_status(); return response.json()
    except requests.exceptions.RequestException: st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ"); return []

@st.cache_data(ttl=3600)
def get_all_products():
    try:
        response = requests.get(f"{API_BASE_URL}/products"); response.raise_for_status(); return response.json()
    except requests.exceptions.RequestException: st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ"); return []

st.set_page_config(layout="wide", page_title="Dashboard")
st.title("üìä Dashboard ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")

orders = get_all_orders()
products = get_all_products()

if not orders:
    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡∏°‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
else:
    orders_df = pd.DataFrame(orders)
    orders_df['order_date'] = pd.to_datetime(orders_df['order_date'])
    
    st.sidebar.header("‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    today = datetime.now().date()
    start_date = st.sidebar.date_input('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô', today - timedelta(days=7))
    end_date = st.sidebar.date_input('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î', today)

    mask = (orders_df['order_date'].dt.date >= start_date) & (orders_df['order_date'].dt.date <= end_date)
    filtered_orders_df = orders_df.loc[mask]

    if filtered_orders_df.empty:
        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
    else:
        total_revenue = filtered_orders_df['total_amount'].sum()
        total_orders = len(filtered_orders_df)
        avg_order_value = total_revenue / total_orders if total_orders > 0 else 0

        kpi1, kpi2, kpi3 = st.columns(3)
        kpi1.metric(label="‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ö‡∏≤‡∏ó)", value=f"{total_revenue:,.2f}")
        kpi2.metric(label="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", value=f"{total_orders:,}")
        kpi3.metric(label="‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (‡∏ö‡∏≤‡∏ó)", value=f"{avg_order_value:,.2f}")

        st.divider()
        
        daily_sales = filtered_orders_df.set_index('order_date').resample('D')['total_amount'].sum().reset_index()
        daily_sales.rename(columns={'order_date': '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', 'total_amount': '‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢'}, inplace=True)

        # --- ‡∏™‡πà‡∏ß‡∏ô Logic ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ ---
        all_items_df = filtered_orders_df.explode('items')
        items_detail_df = pd.json_normalize(all_items_df['items'].apply(lambda x: x if isinstance(x, dict) else {}))

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'item_total' ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        if 'item_total' not in items_detail_df.columns:
            items_detail_df['item_total'] = 0
        items_detail_df['item_total'].fillna(0, inplace=True)
        # --------------------------------------------

        top_products = items_detail_df.groupby('product_name')['quantity'].sum().sort_values(ascending=False).reset_index()
        top_products.rename(columns={'product_name': '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', 'quantity': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ'}, inplace=True)
        
        col1, col2 = st.columns(2)
        with col1:
            st.subheader("üìà ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
            st.bar_chart(daily_sales, x='‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', y='‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢', use_container_width=True)
            
            st.subheader("üç∞ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà")
            if products and not items_detail_df.empty:
                products_df = pd.DataFrame(products)
                product_category_map = products_df.set_index('id')['category'].to_dict()
                items_detail_df['category'] = items_detail_df['product_id'].apply(lambda x: product_category_map.get(x))
                category_sales_df = items_detail_df.dropna(subset=['category'])
                
                if not category_sales_df.empty:
                    category_sales = category_sales_df.groupby('category')['item_total'].sum().reset_index()
                    category_sales.rename(columns={'category': '‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà', 'item_total': '‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢'}, inplace=True)
                    fig = px.pie(category_sales, names='‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà', values='‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢', hole=.3)
                    fig.update_traces(textposition='inside', textinfo='percent+label')
                    st.plotly_chart(fig, use_container_width=True)
                else:
                    st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ")
            else:
                 st.info("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏î‡πâ")

        with col2:
            st.subheader("‚≠ê 5 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ")
            st.dataframe(top_products.head(5), use_container_width=True, hide_index=True)
            st.subheader("üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
            st.dataframe(top_products, use_container_width=True, hide_index=True)