# pages/4_üìä_Dashboard.py

import streamlit as st
import requests
import pandas as pd
import plotly.express as px
from datetime import datetime, timedelta

# -----------------------------------------------------------------------------
# ‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô API
# -----------------------------------------------------------------------------

API_BASE_URL = "http://localhost:8000" # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç IP ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

# ‡πÉ‡∏ä‡πâ @st.cache_data ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Streamlit ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏ß‡πâ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡∏¥‡∏Å
@st.cache_data(ttl=300) # ‡πÄ‡∏Å‡πá‡∏ö cache ‡πÑ‡∏ß‡πâ 5 ‡∏ô‡∏≤‡∏ó‡∏µ
def get_all_orders():
    try:
        response = requests.get(f"{API_BASE_URL}/orders")
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException:
        st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ")
        return []

@st.cache_data(ttl=3600) # ‡πÄ‡∏Å‡πá‡∏ö cache ‡πÑ‡∏ß‡πâ 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
def get_all_products():
    try:
        response = requests.get(f"{API_BASE_URL}/products")
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException:
        st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ")
        return []

# -----------------------------------------------------------------------------
# üñºÔ∏è ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (UI Layout)
# -----------------------------------------------------------------------------

st.set_page_config(layout="wide", page_title="Dashboard")
st.title("üìä Dashboard ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")

orders = get_all_orders()
products = get_all_products()

if not orders:
    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡∏°‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
else:
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô Pandas DataFrame ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏á‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
    orders_df = pd.DataFrame(orders)
    orders_df['order_date'] = pd.to_datetime(orders_df['order_date'])
    
    # --- ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ---
    st.sidebar.header("‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    today = datetime.now().date()
    start_date = st.sidebar.date_input('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô', today - timedelta(days=7))
    end_date = st.sidebar.date_input('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î', today)

    # ‡∏Å‡∏£‡∏≠‡∏á DataFrame ‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    mask = (orders_df['order_date'].dt.date >= start_date) & (orders_df['order_date'].dt.date <= end_date)
    filtered_orders_df = orders_df.loc[mask]

    if filtered_orders_df.empty:
        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
    else:
        # --- 1. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• KPIs (Key Performance Indicators) ---
        total_revenue = filtered_orders_df['total_amount'].sum()
        total_orders = len(filtered_orders_df)
        avg_order_value = total_revenue / total_orders if total_orders > 0 else 0

        kpi1, kpi2, kpi3 = st.columns(3)
        kpi1.metric(label="‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ö‡∏≤‡∏ó)", value=f"{total_revenue:,.2f}")
        kpi2.metric(label="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", value=f"{total_orders:,}")
        kpi3.metric(label="‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (‡∏ö‡∏≤‡∏ó)", value=f"{avg_order_value:,.2f}")

        st.divider()

        # --- 2. ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü ---
        
        # ‡∏Å. ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
        daily_sales = filtered_orders_df.set_index('order_date').resample('D')['total_amount'].sum()
        daily_sales = daily_sales.reset_index()
        daily_sales.rename(columns={'order_date': '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', 'total_amount': '‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢'}, inplace=True)

        # ‡∏Ç. ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ
        # 'explode' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å list ‡∏Ç‡∏≠‡∏á items ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ñ‡∏ß‡πÜ
        all_items_df = filtered_orders_df.explode('items')
        items_detail_df = pd.json_normalize(all_items_df['items'])
        
        # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ
        top_products = items_detail_df.groupby('product_name')['quantity'].sum().sort_values(ascending=False).reset_index()
        top_products.rename(columns={'product_name': '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', 'quantity': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ'}, inplace=True)
        
        # ‡∏Ñ. ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        if products:
            products_df = pd.DataFrame(products)
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á dict ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö map id -> category
            product_category_map = products_df.set_index('id')['category'].to_dict()
            items_detail_df['category'] = items_detail_df['product_id'].map(product_category_map)
            
            category_sales = items_detail_df.groupby('category')['item_total'].sum().reset_index()
            category_sales.rename(columns={'category': '‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà', 'item_total': '‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢'}, inplace=True)
        
        # --- 3. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏≤‡∏ü ---
        col1, col2 = st.columns(2)

        with col1:
            st.subheader("üìà ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
            st.bar_chart(daily_sales, x='‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', y='‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢', use_container_width=True)
            
            st.subheader("üç∞ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà")
            if products:
                fig = px.pie(category_sales, names='‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà', values='‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢', hole=.3)
                fig.update_traces(textposition='inside', textinfo='percent+label')
                st.plotly_chart(fig, use_container_width=True)

        with col2:
            st.subheader("‚≠ê 5 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ")
            st.dataframe(
                top_products.head(5),
                use_container_width=True,
                hide_index=True
            )
            
            st.subheader("üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
            st.dataframe(
                top_products,
                use_container_width=True,
                hide_index=True
            )