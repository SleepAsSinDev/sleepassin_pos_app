# 1_üõí_Point_of_Sale.py (Updated with Grid Card Layout)

import streamlit as st
import requests
# ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Pandas ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÑ‡∏î‡πâ
# import pandas as pd 
from typing import List, Dict, Any

# -----------------------------------------------------------------------------
# ‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô API (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
# -----------------------------------------------------------------------------
API_BASE_URL = "http://192.168.1.145:8000"

def get_products() -> List[Dict[str, Any]]:
    try:
        response = requests.get(f"{API_BASE_URL}/products")
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö API ‡πÑ‡∏î‡πâ: {e}")
        return []

def post_order(order_items: List[Dict[str, Any]]) -> bool:
    order_data_to_send = {"items": order_items}
    try:
        response = requests.post(f"{API_BASE_URL}/orders", json=order_data_to_send)
        response.raise_for_status()
        st.success(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå: {response.json().get('id')}")
        return True
    except requests.exceptions.RequestException as e:
        st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ: {e.response.json().get('detail')}")
        return False

# -----------------------------------------------------------------------------
# üõí ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ (‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤) (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
# -----------------------------------------------------------------------------
if 'cart' not in st.session_state:
    st.session_state.cart = {}

def add_to_cart(product_id: str, name: str, price: float):
    if product_id in st.session_state.cart:
        st.session_state.cart[product_id]['quantity'] += 1
    else:
        st.session_state.cart[product_id] = {"name": name, "price": price, "quantity": 1}
    st.rerun()

def remove_from_cart(product_id: str):
    if product_id in st.session_state.cart:
        del st.session_state.cart[product_id]
        st.rerun()

def update_quantity(product_id: str, quantity: int):
    if product_id in st.session_state.cart:
        if quantity > 0:
            st.session_state.cart[product_id]['quantity'] = quantity
        else:
            del st.session_state.cart[product_id]
        st.rerun()

# -----------------------------------------------------------------------------
# üñºÔ∏è ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (UI Layout)
# -----------------------------------------------------------------------------

st.set_page_config(layout="wide", page_title="Point of Sale")
st.title("‚òï Point of Sale (POS)")

products = get_products()

if products:
    all_categories = sorted(list(set(p['category'] for p in products)))
    categories_with_all = ["‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + all_categories
else:
    categories_with_all = ["‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"]

col_menu, col_cart = st.columns([2, 1.2])

# --- ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ã‡πâ‡∏≤‡∏¢: ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏õ‡πá‡∏ô Grid Card Layout) ---
with col_menu:
    st.header("‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")

    selected_category = st.selectbox(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà:",
        options=categories_with_all,
        key="category_filter"
    )

    if selected_category == "‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
        filtered_products = products
    else:
        filtered_products = [p for p in products if p['category'] == selected_category]
    
    if not filtered_products:
        st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" if selected_category == "‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ")
    else:
        # --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á: ‡∏™‡∏£‡πâ‡∏≤‡∏á Grid Layout ---
        num_columns = 3  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ñ‡∏ß‡∏•‡∏∞ 3 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
        cols = st.columns(num_columns)
        
        # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡∏≠‡∏á Grid
        for i, product in enumerate(filtered_products):
            col_index = i % num_columns
            with cols[col_index]:
                with st.container(border=True, height=350): # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á container
                    if product.get("image_url"):
                        st.image(
                            f"{API_BASE_URL}{product['image_url']}",
                            use_container_width=True
                        )
                    
                    st.subheader(f"{product['name']}")
                    st.write(f"**‡∏£‡∏≤‡∏Ñ‡∏≤: {product['price']:.2f} ‡∏ø**")

                    # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
                    if st.button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤", key=f"add_{product['id']}", use_container_width=True):
                        add_to_cart(
                            product_id=product['id'],
                            name=product['name'],
                            price=product['price']
                        )

# --- ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡∏ß‡∏≤: ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
with col_cart:
    st.header("üõí ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô")
    
    if not st.session_state.cart:
        st.info("‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤")
    else:
        # ... (‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î) ...
        total_amount = 0.0
        header_cols = st.columns([3, 2, 2, 1])
        header_cols[0].write("**‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤**")
        header_cols[1].write("**‡∏à‡∏≥‡∏ô‡∏ß‡∏ô**")
        header_cols[2].write("**‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°**")
        
        for product_id, item_details in list(st.session_state.cart.items()):
            item_cols = st.columns([3, 2, 2, 1])
            item_cols[0].write(item_details['name'])
            new_quantity = item_cols[1].number_input(
                "Qty", min_value=0, value=item_details['quantity'], 
                key=f"qty_{product_id}", label_visibility="collapsed"
            )
            if new_quantity != item_details['quantity']:
                update_quantity(product_id, new_quantity)
            item_total = item_details['price'] * item_details['quantity']
            item_cols[2].write(f"{item_total:.2f}")
            if item_cols[3].button("üóëÔ∏è", key=f"del_{product_id}"):
                remove_from_cart(product_id)
            total_amount += item_total

        st.divider()
        st.subheader(f"‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {total_amount:.2f} ‡∏ö‡∏≤‡∏ó")
        
        col_btn1, col_btn2 = st.columns(2)
        with col_btn1:
            if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", use_container_width=True, type="primary"):
                order_items_to_send = [
                    {"product_id": pid, "quantity": details["quantity"]}
                    for pid, details in st.session_state.cart.items()
                ]
                if post_order(order_items_to_send):
                    st.session_state.cart = {}
                    st.balloons()
                    st.rerun()
        with col_btn2:
            if st.button("‚ùå ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤", use_container_width=True):
                st.session_state.cart = {}
                st.rerun()